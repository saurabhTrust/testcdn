(function(a){typeof define=="function"&&define.amd?define(a):a()})(function(){"use strict";(function(a,l){typeof exports=="object"&&typeof module<"u"?l(exports):typeof define=="function"&&define.amd?define(["exports"],l):(a=a||self,l(a.P2PBundle={}))})(void 0,function(a){const{createLibp2p:l}=a.libp2p||require("libp2p"),{webSockets:o}=a.libp2pWebsockets||require("@libp2p/websockets"),{noise:d}=a.libp2pNoise||require("@chainsafe/libp2p-noise"),{yamux:u}=a.libp2pYamux||require("@chainsafe/libp2p-yamux"),{circuitRelayTransport:p}=a.libp2pCircuitRelay||require("@libp2p/circuit-relay-v2"),{webRTC:h}=a.libp2pWebRTC||require("@libp2p/webrtc"),{identify:f}=a.libp2pIdentify||require("@libp2p/identify");a.multiformats||require("@multiformats/multiaddr");const w=a.libp2pWebsocketsFilters||require("@libp2p/websockets/filters");class r{constructor(e){this.node=null,this.localStream=null,this.connections=new Map,this.callStatus="idle",this.callbacks=e||{}}async initializeAsListener(e){return this.node=await l({addresses:{listen:["/p2p-circuit","/webrtc"]},transports:[o({filter:w.all}),h({rtcConfiguration:{iceServers:[{urls:"stun:stun.l.google.com:19302"}]}}),p()],connectionEncrypters:[d()],streamMuxers:[u()],services:{identify:f()}}),await this.setupSignalingHandler(),await this.node.start(),await this.node.dial(e),this.node.peerId.toString()}async setupSignalingHandler(){this.node.handle("/webrtc-signaling/1.0.0",async({connection:e,stream:i})=>{const t=e.remotePeer.toString(),n=new TextDecoder;try{for await(const s of i.source){const c=JSON.parse(n.decode(s.subarray()));await this.handleSignalingMessage(t,c,e)}}catch(s){console.error("Signaling handler error:",s)}})}async handleSignalingMessage(e,i,t){var n,s;switch(i.type){case"call-request":if(this.callStatus!=="idle"){await this.sendSignalingMessage(t,{type:"call-rejected",reason:"busy"});return}this.callStatus="ringing",await((s=(n=this.callbacks).onIncomingCall)==null?void 0:s.call(n,i.from,i.isVideo))?await this.handleCallAcceptance(t,e,i):await this.sendSignalingMessage(t,{type:"call-rejected",reason:"declined"});break;case"call-accepted":await this.handleCallAccepted(e,t);break;case"ice-candidate":await this.handleIceCandidate(e,i.candidate);break;case"end-call":await this.cleanupCall();break}}async initializeMedia(e){var i,t;try{return this.localStream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!0,noiseSuppression:!0},video:e}),(t=(i=this.callbacks).onLocalStream)==null||t.call(i,this.localStream),this.localStream}catch(n){throw console.error("Media initialization error:",n),n}}async startCall(e,i){try{await this.initializeMedia(i);const t=await this.connectToPeer(e);return await this.sendSignalingMessage(t,{type:"call-request",isVideo:i,from:this.node.peerId.toString()}),this.callStatus="ringing",t}catch(t){throw console.error("Call start error:",t),await this.cleanupCall(),t}}async cleanupCall(){var e,i;this.localStream&&(this.localStream.getTracks().forEach(t=>{t.enabled=!1,t.stop()}),this.localStream=null);for(const[,t]of this.connections.entries())t.peerConnection&&t.peerConnection.close();this.connections.clear(),this.callStatus="idle",(i=(e=this.callbacks).onCallEnded)==null||i.call(e)}async sendSignalingMessage(e,i){await(await e.newStream("/webrtc-signaling/1.0.0")).sink([new TextEncoder().encode(JSON.stringify(i))])}}class b{constructor(e){this.p2pClient=null,this.currentPeerId=null,this.callbacks=e}async initialize(e){try{return this.p2pClient=new r(this.callbacks),this.currentPeerId=await this.p2pClient.initializeAsListener(e),this.currentPeerId}catch(i){throw console.error("P2P initialization error:",i),i}}async startCall(e,i){return this.p2pClient.startCall(e,i)}async endCall(){this.p2pClient&&await this.p2pClient.cleanupCall()}}return a.P2PClient=r,a.P2PHandler=b,a.version="1.0.0",typeof window<"u"&&(window.P2PBundle=a),a})});
